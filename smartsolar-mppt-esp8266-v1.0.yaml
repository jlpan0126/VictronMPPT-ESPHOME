substitutions:
  external_components_source: github://jlpan0126/VictronMPPT-ESPHOME@main
  lower_devicename: "vtsmartsolar"
  devicename: "SmartSolar_100_20:"
  config_version: "v2024.04.02"
  wifi_fast_connect: "true"
  accuracy: "2"

external_components:
  - source: ${external_components_source}
    refresh: 0s

esphome:
  name: "${lower_devicename}"
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 200.0
    then:
    - lambda: |-
        id(minBv).state=999;
        id(maxBv).state=0;

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  fast_connect: $wifi_fast_connect
  reboot_timeout: 0s

mqtt:  # 新增
  broker: !secret mqtt_host
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: mqtt_client_npust
  reboot_timeout: 0s
  topic_prefix: null
  log_topic: null
  keepalive: 15min

captive_portal:
logger:
  baud_rate: 0 #關閉logger監聽
  # level: VERY_VERBOSE #開啟所有log
  level: WARN
  esp8266_store_log_strings_in_flash: false

# Enable Home Assistant API
# api:
#   password: "pass"
#   reboot_timeout: 0s

ota:
  - platform: esphome
    password: "pass"

web_server:
  port: 80

# time:
#   - platform: homeassistant

uart:
  id: uart_bus
  tx_pin: D8  # Not connected! The communication is read-only
  rx_pin: D7  # Connect this this GPIO and GND to the MPPT charger
  baud_rate: 19200
  stop_bits: 1
  data_bits: 8
  parity: NONE
  rx_buffer_size: 256

victron:
  id: victron0
  uart_id: uart_bus
#----數據感測器---
sensor:
  - platform: victron
    victron_id: victron0 
    yield_total:
      name: "Yield total"
      id: yield_total
      # filters:
      #   # Multiplication factor from W to kW is 0.001
      #   - multiply: 0.001
      unit_of_measurement: Wh
      accuracy_decimals: ${accuracy}
    yield_yesterday:
      name: "Yield yesterday"
      id: yield_yesterday
      # filters:
      #   # Multiplication factor from W to kW is 0.001
      #   - multiply: 0.001
      unit_of_measurement: Wh     
      accuracy_decimals: ${accuracy}
    yield_today:
      name: "Yield today"
      id: yt
      # filters:
      #   # Multiplication factor from W to kW is 0.001
      #   - multiply: 0.001
      unit_of_measurement: Wh
      accuracy_decimals: ${accuracy}
    panel_power:
      name: "Panel power"
      id: panel_power
    panel_voltage:
      name: "Panel voltage"
      id: pv
    battery_voltage:
      name: "Battery voltage(總體電池)"
      id: bv
    battery_current:
      name: "Battery current"
      id: bc
    day_number:
      name: "Day sequence number"
      id: day_number
      icon: "mdi:calendar-today"
  - platform: template
    name: "Consumption(Wh)"
    id: Consumption
    #Wh=Ah*V
    lambda: |-
      if(id(bc).state<0&&id(bv).state>0){
        return abs(id(bc).state*60*id(bv).state);
      }
      return 0;
    update_interval: 1s
    unit_of_measurement: Wh
    device_class: "energy"

  - platform: template
    name: "min_battery_voltage"
    id: minBv
    lambda: |-
      if(id(bv).state<id(minBv).state){
        id(minBv).state = id(bv).state;
        return id(minBv).state;
      }
      return id(minBv).state;
    update_interval: 1s
    icon: "mdi:battery"
    unit_of_measurement: V
    device_class: "voltage"
    accuracy_decimals: ${accuracy}

  - platform: template
    name: "max_battery_voltage"
    id : maxBv
    lambda: |-
      if(id(bv).state>id(maxBv).state){
        id(maxBv).state = id(bv).state;
        return id(maxBv).state;
      }
      return id(maxBv).state;
    update_interval: 1s
    icon: "mdi:battery"
    unit_of_measurement: V
    device_class: "voltage"
    accuracy_decimals: ${accuracy} 
#裝置更新時間
  - platform: uptime
    name: "${devicename} Uptime"
    id: uptime_s
    update_interval: 1s

text_sensor:
  - platform: victron
    victron_id: victron0
    charging_mode:
      name: "Charging Mode"
    error:
      name: "Error"
    device_type:
      name: "Device Type"
  #裝置更新時間(格式化)
  - platform: template
    name: "${devicename} Uptime (formatted)"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[50];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 1s
#---------------------upload for MQTT----------------
  - platform: template
    name: "MQTT_BATTERY_VOLTAGE"
    id: BATTERY_VOLTAGE
    lambda: |-
      double value = id(bv).state*100;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_BATTERY_CURRENT"
    id: BATTERY_CURRENT
    lambda: |-
      double value = abs(id(bc).state)*1000;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_MIN_BATTERY_VOLTAGE"
    id: MIN_BATTERY_VOLTAGE
    lambda: |-
      double value = id(minBv).state*100;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_MAX_BATTERY_VOLTAGE"
    id: MAX_BATTERY_VOLTAGE
    lambda: |-
      double value = id(maxBv).state*100;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_PANEL_POWER"
    id: PANEL_POWER
    lambda: |-
      double value = id(panel_power).state*100;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_PANEL_VOLTAGE"
    id: PANEL_VOLTAGE
    lambda: |-
      double value = id(pv).state*100;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_ELECTRICAL_YIELD"
    id: ELECTRICAL_YIELD
    lambda: |-
      double value = id(yield_total).state;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

  - platform: template
    name: "MQTT_ELECTRICAL_CONSUMPTION"
    id: ELECTRICAL_CONSUMPTION
    lambda: |-
      double value = id(Consumption).state;
      char hex_str[5]; // 十六進制再加上一個空字符終結符
      uint16_t int_value = static_cast<uint16_t>(value); // Convert to unsigned 16-bit integer
      snprintf(hex_str, sizeof(hex_str), "%04x", int_value);
      return esphome::optional<std::string>(hex_str);
    update_interval: 30s

interval:
  - interval: 1min 
    then:
      - mqtt.publish: 
          topic: PBL/UL/
          payload: !lambda |-
            std::string prefix="[{\"macAddr\": \"Lab-Module-v1\", \"data\":\"";
            std::string postfix="\"}]";
            if(id(day_number).state>=0){
            return {prefix
            +"02A2"+id(PANEL_POWER).state.c_str()
            +"02A3"+id(PANEL_VOLTAGE).state.c_str()
            +"02A7"+id(BATTERY_VOLTAGE).state.c_str()
            +"0276"+id(BATTERY_CURRENT).state.c_str()
            +postfix};
            }
            return "";
  - interval: 1min 
    then:
      - mqtt.publish: 
          topic: PBL/UL/
          payload: !lambda |-
            std::string prefix="[{\"macAddr\": \"Lab-Module-v1\", \"data\":\"";
            std::string postfix="\"}]";
            if((id(minBv).state<=15||id(maxBv).state<=15)&&id(day_number).state>=0){
            return {prefix
            +"12A7"+id(MIN_BATTERY_VOLTAGE).state.c_str()
            +"22A7"+id(MAX_BATTERY_VOLTAGE).state.c_str()
            +postfix};
            }
            return "";
  - interval: 5min
    then:
      - mqtt.publish: 
          topic: PBL/UL/
          payload: !lambda |-
            std::string prefix="[{\"macAddr\": \"Lab-Module-v1\", \"data\":\"";
            std::string postfix="\"}]";
            if(id(day_number).state>=0){
            return {prefix
            +"02A0"+id(ELECTRICAL_YIELD).state.c_str()
            +"02A1"+id(ELECTRICAL_CONSUMPTION).state.c_str()
            +postfix};
            }
            return "";
#---------------------upload for MQTT----------------
switch:
  - platform: restart
    icon: mdi:reload-alert
    name: "${devicename} Restart"
  - platform: safe_mode
    name: "${devicename} Safe mode"
